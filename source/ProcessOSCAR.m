function [oscarData] = ProcessOSCAR(North, East, opts, StartTime, EndTime)
    %% ProcessOSCAR
    %   This function is written with the purpose of processing the OSCAR sea surface velocity data from a series of .nc
    %   files, based on collection, to a single matlab strucutre with appropriate data.
    %
    %   "Ocean Surface Current Analyses Real-time (OSCAR) is a global surface current database and NASA funded research
    %   project. OSCAR ocean mixed layer velocities are calculated from satellite-sensed sea surface height gradients,
    %   ocean vector winds, and sea surface temperature gradients using a simplified physical model for geostrophy,
    %   Ekman, and thermal wind dynamics. Daily averaged surface currents are provided on a global 0.25 x 0.25 degree
    %   grid as an average over an assumed well-mixed top 30 m of the ocean from 1993 to present day. OSCAR currents
    %   are provided at three quality levels: final, interim and nrt with a respective latency of each of approximately
    %   1 year, 1 month, and 2 days. OSCAR is generated by Earth & Space Research (ESR)
    %   https://www.esr.org/research/oscar/. More details on the source datasets, file structure, and methodology can
    %   be found in oscarv2guide.pdf."
    %
    %   The lag is realistically more like 4 years for the final data (as of writing) 2 months for the interim data and
    %   a few days for the near real time data. NRT only spans back two or three years, interim a year or two more, and
    %   the final data set covers all the way back to 01-01-1993. The data comes as a full earth-wide grid and is fast
    %   to download, so the entire dataset has been downloaded to a shared drive.
    %
    %       REQUIRED INPUTS:
    %           North: The northern latitudinal coordiante (decimal degrees north from the equator).
    %           East:  The eastern longitudinal coordinate (decimal degrees east from the prime meridian).
    %
    %       OPTIONAL INPUTS:
    %           opts: This is a workaround for calling the function within the MATLAB app and will default to an empty
    %                 struct when not needed. Do not include the variable when calling from the command line or from
    %                 another script.
    %           StartTime: The beginning date for data, defined as a datetime object.
    %           EndTime: The end date for data, defined as a datetime object.
    %
    %       OUTPUTS:
    %           A .mat file with the processed OSCAR ocean surface currents.
    %
    %
    %       Created: Feb 28, 2024
    %       Edited:  Mar 05, 2024S
    %



    %% Validataion
    arguments
        North (1,1) double {mustBeNonempty,mustBeFinite,mustBeNonNan,mustBeReal,mustBeInRange(North,-90,90)}
        East (1,1) double {mustBeNonempty,mustBeFinite,mustBeNonNan,mustBeReal,mustBeInRange(East,-180,180)}
        opts struct = struct()
        StartTime (1,1) datetime {mustBeAfter('19920101',StartTime),mustBeBeforeToday(StartTime,0)} = datetime(1993, 1, 1, 0, 0, 0)
        EndTime (1,1) datetime {mustBeBeforeToday(EndTime,0),compareTimes(StartTime,EndTime)} = datetime('today')
    end


    %% Make output directories
    % always make this check, we don't know what order the processors have been called in.
    if ~isfolder('../data')
        mkdir('../data')
    end


    %% Constants
    t0 = datetime(1990, 1, 1, 0, 0, 0, 0);


    %% Ask which collection
    % OSCAR has a variety of data collections, each downloads as a full world .nc with no way to narrow down the data.
    % It is saved to Drive, here the user is asked which collection they would like to access and then the appropriate
    % variable is set to the collection name
    if isempty(fieldnames(opts))
        lstOpts = {'Final (1 year lag)', 'Interim (1 month lag)', 'Near-Real-Time (1 day lag)'};
        [indxVar, ~] = listdlg('PromptString', {'Select a collection to', 'pull currents from.'}, ...
            'SelectionMode', 'single', 'OKString', 'Select', 'CancelString', 'No Selection', ...
            'Name', 'OSCAR Collections', 'ListSize', [250 200], 'InitialValue', 1, 'ListString', lstOpts);
        if isempty(indxVar)
            error('No OSCAR collection selected.')
        end
    else
        indxVar = opts.oscr;
    end

    % set the collection name based on that decision
    switch indxVar
        case 1
            coll = '0p25_fin_surface_vel';
        case 2
            coll = '0p25_int_surface_vel';
        case 3
            coll = '0p25_nrt_surface_vel';
    end


    %% run through the files
    % get the names of all the files in the collection
    oscarDir = dir(['G:\Shared drives\OSCAR_Collections\' coll '\*.nc']);
    variables = ncinfo(fullfile(oscarDir(1).folder, oscarDir(1).name)).Variables;
    z = zeros(1,length(oscarDir));
    oscarData = struct('north', North, 'east', East, 'latitude', [], 'longitude', [], ...
        'time', NaT(size(z)), 'u', z, 'v', z, 'ug', z, 'vg', z);
    % shift the input longitude to account for the grid used by OSCAR
    if East < 0
        East = East + 360;
    end

    % loop through all the files
    numReps = 10;
    inds = round(linspace(1, length(oscarDir), numReps + 1));
    inds = inds(2:end);
    tic;
    for o = 1:length(oscarDir)
        % get the data from the current file and save it to a temporary structure
        fileName = fullfile(oscarDir(o).folder, oscarDir(o).name);
        temp = struct();
        for v = 1:length(variables)
            temp.(variables(v).Name) = ncread(fileName, variables(v).Name);
        end

        % get time and make a decision based on start and end time
        time = t0 + days(temp.time);
        if time < StartTime || time > EndTime
            continue;
        end

        % get the index in the matrices for the latitude and longitude, do this each time for completeness and safety.
        [~, ilat] = min(abs(temp.lat - North));
        [~, ilon] = min(abs(temp.lon - East));
        % save the latitude and longitude the first time, that way we know the location of the grid.
        if o == 1
            oscarData.latitude = temp.lat(ilat);
            oscarData.longitude = temp.lon(ilon);
        end

        % save the velocities
        oscarData.time(o) = time;
        oscarData.u(o)    = temp.u(ilat, ilon);
        oscarData.v(o)    = temp.v(ilat, ilon);
        oscarData.ug(o)   = temp.ug(ilat, ilon);
        oscarData.vg(o)   = temp.vg(ilat, ilon);

        switch o
            case num2cell(inds)
                t = toc;
                fprintf('%0.2f%% of files finished. %0.2f seconds elapsed.\n\tEstimated %0.2f seconds remain.\n\n', ...
                    o/length(oscarDir), t, (t/o)*(length(oscarDir) - o));
        end

    end

    % Save the data to the .mat file and return the outputs
    save('../data/OSCARData.mat', 'oscarData')
    %% end of function %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end







